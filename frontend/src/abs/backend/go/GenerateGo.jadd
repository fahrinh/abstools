import java.io.*;

import abs.backend.common.CodeStream;
import abs.backend.go.*;
import abs.frontend.ast.*;

aspect GenerateGo{

//    public boolean Model.includeDebug = true; TODO

    public void Model.generateGoCode(GoCode code) throws IOException, GoCodeGenerationException {
        GoGeneratorHelper.cleanGenFolder(code);
        for (ModuleDecl decl : getModuleDecls()) {

        if(Constants.BUILT_IN_LIBS.contains(decl.getName())||"ABS.SmartDeploy".equals(decl.getName()))continue;

            try {
                decl.generateGoCode(code);
            } catch (NotImplementedYetException e) { 
                throw new GoCodeGenerationException("Module " + decl.getName() + ":" + e.getLocalizedMessage(),e); 
            } catch (RuntimeException e) { 
                throw new GoCodeGenerationException("Module " + decl.getName() + ":" + e.getLocalizedMessage(),e); 
            }
        }
    }


    // Provide easy access to the Go package that is generated for each ModuleDecl
    private GoCode.Package ModuleDecl.generatedGoPackage = null;
    private GoCode.Package ModuleDecl.generatedGoMainPackage = null;

    public GoCode.Package ModuleDecl.getGoPackage() throws GoCodeGenerationException {
        if (generatedGoPackage != null)
            return generatedGoPackage; 
        else 
            throw new GoCodeGenerationException("A Go Package is not yet associated with this ModuleDecl (this only happens upon code generation).");
    }

    public void ModuleDecl.generateGoCode(GoCode code) throws IOException, GoCodeGenerationException {
        String packageName = getName().toLowerCase();
        this.generatedGoPackage = code.createPackage(packageName);

        for (Decl decl : getDecls()) {
            decl.generateGoCode(generatedGoPackage);
        }

        if (hasBlock()) {
            Block block = getBlock();

            this.generatedGoMainPackage = code.createMainPackage();

            String mainName = GoBackend.getGoNameForMainBlock(this);
            generatedGoMainPackage.addMainClass(mainName);

            File file = generatedGoMainPackage.createGoFile(mainName);
            PrintStream stream = null;
            try {
                stream = new CodeStream(file);
                stream.println("package " + generatedGoMainPackage.packageName);
                GoGeneratorHelper.generateImportForMain(stream, this);
                stream.println("");

                stream.println("func main() {");
                block.generateGo(stream, false, true);
                stream.println("}");
            } finally {
                if (stream != null)
                    stream.close();
            }

        }


    }

    public void Decl.generateGoCode(GoCode.Package pkg) throws IOException, GoCodeGenerationException {
        PrintStream s = null;
        try {
            String name = GoBackend.getGoName(this).toLowerCase();
            File file = pkg.createGoFile(name);
            s = new CodeStream(file);
            s.println("package " + pkg.packageName);
            GoGeneratorHelper.generateImport(s, getModuleDecl(), pkg);
            s.println("");
            generateGo(s);
        } finally {
            if (s != null)
                s.close();
        }

    }

    public void DataTypeDecl.generateGoCode(GoCode.Package pkg) throws IOException, GoCodeGenerationException {
        super.generateGoCode(pkg);
        for (DataConstructor c : getDataConstructors()) {
            c.generateGoCode(pkg);
        }
    }

    abstract void Decl.generateGo(PrintStream stream);

//  TODO
    public void DataConstructor.generateGo(PrintStream stream) {
//        String constructorClassName = GoBackend.getConstructorName(this);
//        DataTypeDecl dataTypeDecl = ((DataTypeType)getType()).getDecl();
//        GoGeneratorHelper.generateHelpLine(this,stream);
//
//        stream.print("public final class " + constructorClassName);
//        GoGeneratorHelper.generateTypeParameters(stream,dataTypeDecl, true);
//        stream.print(" extends " + dataTypeDecl.getName());
//        GoGeneratorHelper.generateTypeParameters(stream,dataTypeDecl, false);
//
//        stream.println(" {");
//
//        int i = 0;
//        for (ConstructorArg u : getConstructorArgs()) {
//            stream.print("public final ");
//            stream.println(GoBackend.getGoType(u) + " arg" + i + ";");
//            stream.println("public " + GoBackend.getGoType(u) + " getArg" + i + "() { return arg" + i + "; }");
//            i++;
//        }
//
//        stream.print("public " + constructorClassName + "(");
//        boolean first = true;
//        i = 0;
//        for (ConstructorArg u : getConstructorArgs()) {
//            if (first)
//                first = false;
//            else
//                stream.print(", ");
//            stream.print("final ");
//            stream.print(GoBackend.getGoType(u) + " arg" + i);
//            i++;
//        }
//        stream.println(") {");
//        i = 0;
//        for (ConstructorArg u : getConstructorArgs()) {
//            stream.println("this.arg" + i + " = arg" + i + ";");
//            i++;
//        }
//        stream.println("}");
//
//        stream.print("protected " + ABSValue.class.getName() + "[] getArgs() { return new " + ABSValue.class.getName() + "[] { ");
//        i=0;
//        for (ConstructorArg u : getConstructorArgs()) {
//            if (i > 0)
//                stream.print(", ");
//            stream.print("this.arg" + i);
//            i++;
//        }
//        stream.println(" }; }");
//
//        stream.println("public java.lang.String getConstructorName() { return \"" + getName() + "\";} ");
//
//        // eq method
//        stream.println("public " + ABSBool.class.getName() + " eq(" + ABSValue.class.getName() + " o) {");
//        stream.println("if (! (o instanceof " + constructorClassName + ")) return " + ABSBool.class.getName() + ".FALSE;");
//        stream.println(constructorClassName + " other = (" + constructorClassName + ") o;");
//
//        i = 0;
//        for (ConstructorArg u : getConstructorArgs()) {
//            stream.println("if (!this.arg" + i + ".eq(other.arg" + i + ").toBoolean()) return " + ABSBool.class.getName() + ".FALSE;");
//            i++;
//        }
//
//        stream.println("return " + ABSBool.class.getName() + ".TRUE;");
//        stream.println("}");
//
//        // match method
//        stream.println("public boolean match(" + PatternConstructor.class.getName() + " c, " + PatternBinding.class.getName() + " b) {");
//        stream.println("if (!c.constructorClass.equals(this.getClass())) return false;");
//        i = 0;
//        for (ConstructorArg u : getConstructorArgs()) {
//            stream.println("if (!c.subpattern[" + i + "].match(this.arg" + i + ", b)) return false;");
//            i++;
//        }
//        stream.println("return true;");
//        stream.println("}");
//
//
//        stream.println("}");
    }

//  TODO
    public void InterfaceDecl.generateGo(PrintStream stream) {
        GoGeneratorHelper.generateHelpLine(this,stream);
        stream.print("type " + GoBackend.getGoName(this) + " interface");
        stream.println(" {");
        for (MethodSig s : getBodys()) {
                      // Sync
                    s.generateGo(stream, false);
                    stream.println("");
        }
        stream.println("}");

//        TODO: NEEDREVIEW
//        stream.print("public interface " + GoBackend.getGoName(this) + " extends " + ABSInterface.class.getName());
//        for (InterfaceTypeUse use : getExtendedInterfaceUses()) {
//            String iname = GoBackend.getQualifiedString(((InterfaceType)use.getType()).getDecl());
//            stream.print(", " + iname);
//        }
//        stream.println(" {");
//
//        for (MethodSig s : getBodys()) {
//            // Async
//            s.generateGo(stream, true);
//            stream.println(";");
//            // Sync
//            s.generateGo(stream, false);
//            stream.println(";");
//        }
//        stream.println("boolean __ABS_isSameCOG();");
//        stream.println("}");
    }

    public void MethodSig.generateGo(PrintStream stream) {
        generateGo(stream,false);
    }

    public void MethodSig.generateGo(PrintStream stream, boolean async) {
        GoGeneratorHelper.generateMethodSig(stream,this,async);
    }

    public void ParamDecl.generateGo(PrintStream stream) {
        stream.print(GoBackend.getVariableName(getName()) + " ");
        getAccess().generateGo(stream);
    }

//  TODO
    public void ClassDecl.generateGo(PrintStream stream) {
        GoGeneratorHelper.generateClassDecl(stream,this);
    }
//
//    public void DeltaDecl.generateGo(PrintStream stream) {
//        // TODO: Go generation here
//    }
//
    public void MethodImpl.generateGo(PrintStream stream) {
        GoGeneratorHelper.generateMethodImpl(stream, this);
    }
//
    public void FieldDecl.generateGo(PrintStream stream) {
        GoGeneratorHelper.generateHelpLine(this,stream);
        stream.print(GoBackend.getVariableName(getName()));
        stream.print(" ");
        getAccess().generateGo(stream);
        stream.println("");
    }
//
//  TODO
    public void DataTypeDecl.generateGo(PrintStream stream) {
//        GoGeneratorHelper.generateHelpLine(this,stream);
//
//        stream.print("public abstract class " + getName());
//        GoGeneratorHelper.generateTypeParameters(stream,this, true);
//
//        stream.println(" extends " + ABSDataType.class.getName() + " {");
//
//        for (DataConstructor c : getDataConstructors()) {
//            stream.println("public final boolean is" + c.getName()+
//                    "() { return this instanceof " + GoBackend.getConstructorName(c)+
//                    "; }");
//            stream.print("public final " + GoBackend.getConstructorName(c));
//            GoGeneratorHelper.generateTypeParameters(stream,this, false);
//            stream.println(" to" + c.getName()+
//                    "() { return (" + GoBackend.getConstructorName(c) + ") this; }");
//
//        }
//
//        stream.println("}");
    }
//
//  TODO
    public void FunctionDecl.generateGo(PrintStream stream) {
        if (getFunctionDef() instanceof BuiltinFunctionDef)
            return;

//        boolean needsTruncate = getType().isIntType()
//            && getFunctionDef() instanceof ExpFunctionDef
//            && ((ExpFunctionDef) getFunctionDef()).getRhs().getType().isRatType() ;

        GoGeneratorHelper.generateHelpLine(this,stream);

        String className = GoBackend.getFunctionName(getName());
//        stream.print("public final class " + className);
//        stream.println(" implements " + ABSFunction.class.getName() + " {");
//        stream.println("private " + className + "() { }");
        stream.print("func ");
//        stream.print(" apply");
        stream.print(" " + className);
        GoGeneratorHelper.generateParams(stream,getParams());

        GoGeneratorHelper.generateTypeParameters(stream,this, true);
        getTypeUse().generateGo(stream);

        stream.println(" {");
        stream.print("return (");
        getFunctionDef().generateGo(stream);
        stream.print(")");
//        if (needsTruncate) {
//            stream.print(".truncate()");
//        }
//        stream.println(";");
        stream.println("}");
//        stream.println("}");
    }

    public void FunctionDef.generateGo(PrintStream stream) { }

    public void ExpFunctionDef.generateGo(PrintStream stream) {
        getRhs().generateGo(stream);
    }

    public void BuiltinFunctionDef.generateGo(PrintStream stream) {
        stream.print("nil");
    }

    public void TypeParameterDecl.generateGo(PrintStream stream) {
        // is never called
    }

    public void UnknownDecl.generateGo(PrintStream stream) {
        // is never called for type-correct programs
    }

    public void TypeSynDecl.generateGo(PrintStream stream) {
        // generate nothing as type synonyms do not appear in the Go outout
    }

    public void ExceptionDecl.generateGo(PrintStream stream) {
        // generate nothing as exceptions are rewritten to datatypes
    }

    public void Block.generateGo(PrintStream stream) {
        generateGo(stream, false, false);
    }

    public void Block.generateGo(PrintStream stream, boolean addReturn) {
        generateGo(stream, addReturn, false);
    }

    public void Block.generateGo(PrintStream stream, boolean addReturn, boolean isMainBlock) {
//        TODO: Maybe, someday we need this uncomment
        if (!isMainBlock) stream.println("{");

        super.generateGo(stream);
//        TODO
//        if (getModel().includeDebug && (this instanceof MainBlock || this instanceof InitBlock)) {
//            stream.print("if (__ABS_getRuntime().debuggingEnabled()) ");
//            String name = "init block";
//            if (this instanceof MainBlock)
//                name = "main block";
//            stream.println("__ABS_getRuntime().getCurrentTask().newStackFrame(this,\"" + name + "\");");
//        }

        for (Stmt stmt : getStmts()) {
            stmt.generateGo(stream);
        }

//        TODO
//        if (this instanceof MainBlock) {
//            for (VarDecl v : getVars()) {
//                if (v.getName().equals("testresult")) {
//                    stream.println("System.out.println(\"__ABS_TESTRESULT=\" + testresult.toBoolean());");
//                }
//            }
//        }

//        TODO
//        if (addReturn) {
//            if (getModel().includeDebug) {
//                stream.println(GoGeneratorHelper.getDebugString(this, getEndLine()));
//                stream.print("if (__ABS_getRuntime().debuggingEnabled()) ");
//                stream.println("__ABS_getRuntime().getCurrentTask().popStackFrame();");
//            }
//
//            stream.println("return " + GoBackendConstants.UNITVALUE + ";");
//        }
//        TODO: Maybe, someday we need this uncomment
        if (!isMainBlock) stream.println("}");
    }
//  TODO
    public void VarDecl.generateGo(PrintStream stream) {
        //getAccess().generateGo(stream);
        String name=GoBackend.getVariableName(getName());

        if(hasInitExp()){
            Exp initExp = getInitExp();
            if (initExp instanceof NullExp) {
                stream.print("var " + name + " ");
                getAccess().generateGo(stream);
            } else {
                stream.print(name + " := ");
                getInitExp().generateGo(stream);
            }
//            if (getType().isIntType() && getInitExp().getType().isRatType()) {
//                stream.print(".truncate()");
//            }
        } else {
            stream.print("var " + name + " ");
            getAccess().generateGo(stream);
//            stream.print("nil");
        }
        stream.println("");
//        if (getModel().includeDebug) {
//            stream.print("if (__ABS_getRuntime().debuggingEnabled()) ");
//            stream.print("__ABS_getRuntime().getCurrentTask().setLocalVariable(\"" + getName() + "\"," + name + ");");
//        }
    }
//
//
//    /*
//     * STATEMENTS
//     */
//  TODO
    public void Stmt.generateGo(PrintStream stream) {
//        if (getModel().includeDebug) {
//            stream.println(GoGeneratorHelper.getDebugString(this));
//        }
    }
//  TODO
    public void VarDeclStmt.generateGo(PrintStream stream) {
        if (getVarDecl().hasInitExp()) {
            super.generateGo(stream);
        }
        getVarDecl().generateGo(stream);
        stream.println();
    }

    public void AssignStmt.generateGo(PrintStream stream) {
        super.generateGo(stream);
        getVar().generateGo(stream);
        stream.print(" = ");
        getValue().generateGo(stream);
//        if (getVar().getType().isIntType() && getValue().getType().isRatType()) {
//            stream.print(".truncate()");
//        }
        stream.println("");
//
//        if (getVar() instanceof VarUse) {
//            if (getModel().includeDebug) {
//                stream.print("if (__ABS_getRuntime().debuggingEnabled()) ");
//                stream.print("__ABS_getRuntime().getCurrentTask().setLocalVariable(\"" + getVar().getName() + "\", ");
//                getVar().generateGo(stream);
//                stream.print(");");
//            }
//        }
//
    }
//
    public void AwaitStmt.generateGo(PrintStream stream) {
//        super.generateGo(stream);
//        GoGeneratorHelper.generateAwaitStmt(this, stream);
    }
//
    public void ExpressionStmt.generateGo(PrintStream stream) {
        super.generateGo(stream);
        getExp().generateGo(stream);
        stream.println("");
    }
//
    public void IfStmt.generateGo(PrintStream stream) {
        super.generateGo(stream);
        stream.print("if ");
        getCondition().generateGo(stream);
        stream.println(" {");
        getThen().generateGo(stream);
        if (hasElse()) {
            stream.println("} else {");
            getElse().generateGo(stream);
            stream.println("}");
        } else {
            stream.println("}");
        }
    }
//
    public void ReturnStmt.generateGo(PrintStream stream) {
        super.generateGo(stream);
//        MethodImpl m = getContextMethod();
//        Type lht = getModel().getUnitType();
//        if (m != null) {
//            lht = m.getMethodSig().getReturnType().getType();
//        }
//        boolean needConversion = lht.isIntType() && getRetExp().getType().isRatType();
//        if (getModel().includeDebug) {
//            stream.print("if (__ABS_getRuntime().debuggingEnabled()) ");
//            stream.println("__ABS_getRuntime().getCurrentTask().popStackFrame();");
//        }
//
        stream.print("return ");
        getRetExp().generateGo(stream);
//        if (lht.isIntType() && getRetExp().getType().isRatType()) {
//            stream.print(".truncate()");
//        }
        stream.println("");
    }
//
    public void SkipStmt.generateGo(PrintStream stream) {
//        super.generateGo(stream);
//        stream.println(";");
    }
//
    public void DurationStmt.generateGo(PrintStream stream) {
//        super.generateGo(stream);
//        stream.println(";");
    }
//
    public void MoveCogToStmt.generateGo(PrintStream stream) {
//        super.generateGo(stream);
//        stream.println(";");
    }
//
    public void SuspendStmt.generateGo(PrintStream stream) {
//        super.generateGo(stream);
//        stream.println(GoBackendConstants.ABSRUNTIME + ".suspend();");
    }
//
    public void WhileStmt.generateGo(PrintStream stream) {
        super.generateGo(stream);
        stream.print("for ");
        getCondition().generateGo(stream);
//        stream.print(".toBoolean())");
        getBody().generateGo(stream);
    }
//
    public void AssertStmt.generateGo(PrintStream stream) {
//        super.generateGo(stream);
//        stream.print("if (!");
//        getCondition().generateGo(stream);
//        stream.print(".toBoolean()) throw new " + ABSAssertException.class.getName() + "(\"");
//        stream.println(getPositionString() + " Assertion failed\");");
//
    }
//
//    /*
//     * GUARDS
//     */
//
//    public abstract void Guard.generateGoGuard(PrintStream beforeAwaitStream, PrintStream stream);
//
//    public void AndGuard.generateGoGuard(PrintStream beforeAwaitStream, PrintStream stream) {
//        stream.print("new " + GoBackendConstants.ANDGUARD + "(");
//        getLeft().generateGoGuard(beforeAwaitStream, stream);
//        stream.print(",");
//        getRight().generateGoGuard(beforeAwaitStream, stream);
//        stream.print(")");
//    }
//
//    public void ClaimGuard.generateGoGuard(PrintStream beforeAwaitStream, PrintStream stream) {
//        stream.print("new " + GoBackendConstants.CLAIMGUARD + "(");
//        getVar().generateGo(stream);
//        stream.print(")");
//    }
//
//    public void ExpGuard.generateGoGuard(PrintStream beforeAwaitStream, PrintStream stream) {
//        GoGeneratorHelper.generateExprGuard(this, beforeAwaitStream, stream);
//    }
//
//    public void DurationGuard.generateGoGuard(PrintStream beforeAwaitStream, PrintStream stream) {
//        stream.print("new " + GoBackendConstants.EXPGUARD+
//                "() { public " + ABSBool.class.getName()+
//                " evaluateExp() { return " +
//                ABSBool.class.getName() + ".TRUE; }}");
//    }
//
//    /*
//     * EXPRESSIONS
//     */
//
    public abstract void Exp.generateGo(PrintStream stream);
//
    public void IncompleteExp.generateGo(PrintStream s) {
        // never called for type correct programs
        throw new GoBackendException(this, "should never happen in type-correct programs!");
    }
//
    public void AsyncCall.generateGo(PrintStream stream) {
//        GoGeneratorHelper.generateAsyncCall(stream, this);
    }
//
    public void AwaitAsyncCall.generateGo(PrintStream stream) {
//        GoGeneratorHelper.generateAwaitAsyncCall(stream, this);
    }
//
    public void SyncCall.generateGo(PrintStream stream) {
        PureExp callee = getCallee();
        final List<PureExp> params = getParams();
        if (callee instanceof ThisExp) {
            stream.print(GoBackend.getMethodName(getMethod()));
            GoGeneratorHelper.generateArgs(stream,params,getMethodSig().getTypes());
        } else {
//            stream.print(ABSRuntime.class.getName() + ".checkForNull(");
//            callee.generateGo(stream);
//            stream.print(").__ABS_isSameCOG() ? ");
            // synchronous method call
            callee.generateGo(stream);
            stream.print("." + GoBackend.getMethodName(getMethod()));
            GoGeneratorHelper.generateArgs(stream,params,getMethodSig().getTypes());
//            stream.print(" : ");
            // asynchronous method call + get
//            callee.generateGo(stream);
//            stream.print(".async_" + GoBackend.getMethodName(getMethod()));
//            GoGeneratorHelper.generateArgs(stream,params,getMethodSig().getTypes());
//            stream.print(".get()");
        }

    }
//
    public void OriginalCall.generateGo(PrintStream stream) {
//        // TODO: implement
//        // throw new NotImplementedYetException(this);
    }
//
    public void GetExp.generateGo(PrintStream stream) {
//        DataTypeType t = (DataTypeType) getPureExp().getType();
//        // assume to be of type Fut<V>
//        if (!t.isFutureType() || !t.hasTypeArgs())
//            return;
//
//        Type typeArg = t.getTypeArg(0);
//        if (!(getParent() instanceof ExpressionStmt)) {
//            stream.print("(" + GoBackend.getQualifiedString(typeArg) + ")");
//        }
//        getPureExp().generateGo(stream);
//        stream.print(".get()");
    }
//
    public void NewExp.generateGo(PrintStream stream) {
        ClassDecl decl=((UnionType)getType()).getOriginatingClass();
        String className=GoBackend.getQualifiedString(decl, true);

//        if (!hasLocal()) {
//            String strategy = null;
//            PureExp scheduler = getInheritedAnnotationValue("Scheduler");
//            PureExp dc = getInheritedAnnotationValue("DC");
//            String dc_exp = "(ABS.DC.DeploymentComponent_i)(__ABS_getRuntime().getCurrentCOG().getDC())";
//            if (dc != null) {
//                ByteArrayOutputStream output = new ByteArrayOutputStream();
//                PrintStream s = new PrintStream(output);
//                dc.generateGo(s);
//                dc_exp = output.toString();
//            }
//            if (scheduler != null) {
//                strategy = GoGeneratorHelper.generateUserSchedulingStrategy(this, scheduler);
//            }
//            stream.print(className + ".__ABS_createNewCOG");
        stream.print(className);
//
//            if (strategy != null)
//                GoGeneratorHelper.generateArgs(stream, "this, new " + strategy + "(), " + dc_exp, getParams(), decl.getTypes());
//            else
//                GoGeneratorHelper.generateArgs(stream, "this, null, " + dc_exp, getParams(), decl.getTypes());
        GoGeneratorHelper.generateNewExpArgs(stream,decl,getParams());
//
//        } else {
//            stream.print(className + ".__ABS_createNewObject");
//            GoGeneratorHelper.generateArgs(stream, "this", getParams(), decl.getTypes());
//        }
    }
//
    public void DataTypeUse.generateGo(PrintStream stream) {
        stream.print(GoBackend.getGoType(this));
    }

    public void InterfaceTypeUse.generateGo(PrintStream stream) {
        stream.print(GoBackend.getGoType(this));
    }
//    /******/
    public void TypeParameterUse.generateGo(PrintStream stream) {
        stream.print(getName());
    }

    public void UnresolvedTypeUse.generateGo(PrintStream stream) {
        throw new GoBackendException(this,"Type " + getName() + " is unresolved!");
    }

    public void FieldUse.generateGo(PrintStream stream) {
        ModuleDecl d = (ModuleDecl) getContextDecl().getModuleDecl();
        String receiverName = GoBackend.getReceiverName(d.getName());
        stream.print(receiverName + "." + GoBackend.getVariableNameUpperCamel(getName()));
    }

    public void VarUse.generateGo(PrintStream stream) {
        stream.print(GoBackend.getVariableName(getName()));
    }

//    TODO ternary ifexp maybe not supported in GO
    public void IfExp.generateGo(PrintStream stream) {
//        getCondExp().generateGo(stream);
//        stream.print(".toBoolean() ? ");
//        getThenExp().generateGo(stream);
//        stream.print(" : ");
//        getElseExp().generateGo(stream);
    }

//    TODO
    public void CaseExp.generateGo(PrintStream stream) {
//        stream.print("new " + Case.class.getName());
//        String varType = GoBackend.getQualifiedString(getExpr().getType());
//        String expType = GoBackend.getQualifiedString(getType());
//        /*
//       stream.print(varType);
//       stream.print(',');
//       stream.println(expType + ">");
//         */
//        stream.println("() {");
//        stream.print("public " + expType + " of(");
//        for (String freeVarName : getFreeVars()) {
//            VarOrFieldDecl decl = lookupVarOrFieldName(freeVarName,false);
//            String freeVarType = GoBackend.getQualifiedString(decl.getType());
//            stream.print("final " + freeVarType + " " + GoBackend.getVariableName(freeVarName));
//            stream.print(", ");
//        }
//
//        stream.println("final " + varType + " __ABS_value) {");
//        int i = 0;
//        for (CaseBranch b : getBranchs()) {
//            String bindingName = "__ABS_binding" + i;
//            stream.print("final " + PatternBinding.class.getName() + " " + bindingName + " = ");
//            Pattern pattern = b.getLeft();
//            pattern.generateGo(stream);
//            stream.println(".match(__ABS_value);");
//            stream.print("if (" + bindingName + " != null) ");
//            stream.println("return new Object() {");
//            stream.print("public " + expType + " execute(");
//            java.util.List<PatternVar> freeVars = pattern.getFreePatternVars();
//            boolean first = true;
//            for (PatternVar var : freeVars) {
//                if (first) first = false;
//                else stream.print(", ");
//                stream.print("final " + GoBackend.getQualifiedString(var.getType()));
//                stream.print(" " + GoBackend.getVariableName(var.getVar().getName()));
//            }
//            stream.print(") { return ");
//            b.getRight().generateGo(stream);
//            stream.println("; }");
//            stream.print("}.execute(");
//            first = true;
//            for (int j = 0; j < freeVars.size(); j++) {
//                if (first) first = false;
//                else stream.print(",");
//                stream.print("(");
//                stream.print(GoBackend.getQualifiedString(freeVars.get(j).getType()));
//                stream.print(") ");
//                stream.print(bindingName + ".getBinding(" + j + ")");
//            }
//            stream.println(");");
//            i++;
//        }
//        stream.print("throw new " + UnmatchedCaseException.class.getName() + "(\"");
//        stream.println(getPositionString() + " value \" + __ABS_value + \" did not match any pattern.\");");
//        stream.println("}");
//        stream.print("}.of(");
//        for (String freeVarName : getFreeVars()) {
//            stream.print(GoBackend.getVariableName(freeVarName));
//            stream.print(", ");
//        }
//
//        getExpr().generateGo(stream);
//        stream.print(")");
    }
//
//    public abstract void Pattern.generateGo(PrintStream stream);
//
//    public void ConstructorPattern.generateGo(PrintStream stream) {
//        DataConstructor decl = getDataConstructor();
//        assert decl != null : "We typechecked it!";
//        stream.print("new " + PatternConstructor.class.getName() + "(" + GoBackend.getQualifiedString(decl) + ".class");
//        for (Pattern p : getParams()) {
//            stream.print(",");
//            p.generateGo(stream);
//        }
//        stream.print(")");
//    }
//
//    public void PatternVar.generateGo(PrintStream stream) {
//        stream.print("new " + PatternVariable.class.getName() + "(\"" + GoBackend.getVariableName(getVar().getName()) + "\")");
//    }
//
//    public void UnderscorePattern.generateGo(PrintStream stream) {
//        stream.print("new " + AnyPattern.class.getName() + "()");
//    }
//
    public void PatternVarUse.generateGo(PrintStream stream) {
        stream.print("new " + PatternValue.class.getName() + "(" + GoBackend.getVariableName(getName()) + ")");
    }
//
//    public void LiteralPattern.generateGo(PrintStream stream) {
//        stream.print("new " + PatternValue.class.getName() + "(");
//        getLiteral().generateGo(stream);
//        stream.print(")");
//    }
//
    public void FnApp.generateGo(PrintStream stream) {

        // Have to explicitly type the call due to a bug in the JastAdd Go
        // compiler that generates wrong code otherwise.
        FunctionDecl d = (FunctionDecl)getDecl();


        if (d.getFunctionDef() instanceof BuiltinFunctionDef) {
            GoGeneratorHelper.generateBuiltInFnApp(stream,this);
            return;
        }

        stream.print(GoBackend.getQualifiedString(d));
        Type declaredResultType = d.getTypeUse().getType();
        if (d instanceof ParametricFunctionDecl) {
            ParametricFunctionDecl funDecl = (ParametricFunctionDecl) d;
            Map<TypeParameter, Type> typeBinding = getTypeParamBindingFromParamDecl(funDecl);

            /*
         StringBuffer buf = new StringBuffer();
         buf.append("<");
         boolean first = true;
         for (TypeParameterDecl tp : funDecl.getTypeParameters()) {
             Type t = typeBinding.get((TypeParameter)tp.getType());
             if (first) first = false;
             else buf.append(",");
             if (t == null) {
                 buf = null;
                 break;
             } else if (t.isBoundedType() && !((BoundedType)t).hasBoundType()) {
                 buf = null;
                 break;
             } else {
                 buf.append(GoBackend.getQualifiedString(t));
             }
         }

         if (buf != null) {
             stream.print(buf.toString());
             stream.print(">");
         }*/
        }

//        stream.print("apply");
        GoGeneratorHelper.generateArgs(stream,getParams(), d.getTypes());
    }

//    TODO
    public void DataConstructorExp.generateGo(PrintStream stream) {
//        DataConstructor c = getDataConstructor();
//        assert c != null;
//        DataTypeDecl decl = c.getDataTypeDecl();
//        Type t = decl.getType();
//        if (t.isBoolType()) {
//            if ("True".equals(c.getName()))
//                stream.print(ABSBool.class.getName() + ".TRUE");
//            else
//                stream.print(ABSBool.class.getName() + ".FALSE");
//        } else if (t.isUnitType()) {
//            stream.print(GoBackendConstants.UNITVALUE);
//        } else {
//            stream.print("new " + GoBackend.getQualifiedString(c));
//            /*
//              if (decl instanceof ParametricDataTypeDecl) {
//                DataTypeType type = (DataTypeType) this.getType();
//                if (type.hasTypeArgs()) {
//                  stream.print("<");
//                  boolean first = true;
//                  for (Type typeArg : type.getTypeArgs()) {
//                    if (first) first = false;
//                    else stream.print(",");
//                    stream.print(GoBackend.getQualifiedString(typeArg));
//                  }
//                  stream.print(">");
//                }
//              }
//             */
//            GoGeneratorHelper.generateArgs(stream,getParams(), c.getTypes());
//        }
    }

//    TODO
    public void LetExp.generateGo(PrintStream stream) {
//        stream.print("new " + Let.class.getName());
//        String varType = GoBackend.getQualifiedString(getVar().getType());
//        String expType = GoBackend.getQualifiedString(getExp().getType());
//        stream.print("() { public " + expType);
//        stream.print(" in(");
//        for (String freeVarName : getExp().getFreeVars()) {
//            if (freeVarName.equals(getVar().getName()))
//                continue;
//            // ignore renaming of variables to temp variables...
//            String freeVarName2 = freeVarName.replaceFirst("^temp\\$[0-9]+\\$", "");
//            VarOrFieldDecl decl = getExp().lookupVarOrFieldName(freeVarName2,false);
//            if (decl == null) {
//                throw new IllegalArgumentException("Variable " + freeVarName + " cannot be resolved");
//            }
//            String freeVarType = GoBackend.getQualifiedString(decl.getType());
//            stream.print("final " + freeVarType + " " + GoBackend.getVariableName(freeVarName));
//            stream.print(", ");
//        }
//
//        stream.print("final " + varType + " " + GoBackend.getVariableName(getVar().getName()));
//        stream.print(") { ");
//        stream.print("return ");
//        getExp().generateGo(stream);
//        stream.print("; }}.in(");
//        for (String freeVarName : getExp().getFreeVars()) {
//            if (freeVarName.equals(getVar().getName()))
//                continue;
//            stream.print(freeVarName);
//            stream.print(", ");
//        }
//        getVal().generateGo(stream);
//        if (getVar().getType().isIntType() && getVal().getType().isRatType()) {
//            stream.print(".truncate()");
//        }
//        stream.print(")");
    }

    public void IntLiteral.generateGo(PrintStream stream) {
//        stream.print(ABSInteger.class.getName());
//        stream.print(".fromString(\"");
        stream.print(getContent());
//        stream.print("\")");
    }

    public void StringLiteral.generateGo(PrintStream stream) {
//        stream.print(ABSString.class.getName());
//        stream.print(".fromString(\"");
        stream.print("\"");
        GoGeneratorHelper.printEscapedString(stream, getContent());
        stream.print("\"");
//        stream.print("\")");
    }

    public void NullExp.generateGo(PrintStream stream) {
        stream.print("nil");
    }

    public void ThisExp.generateGo(PrintStream stream) {
//        stream.print("this");
    }

    public void MinusExp.generateGo(PrintStream stream) {
        getOperand().generateGo(stream);
        stream.print("-");
    }
//
    public void NegExp.generateGo(PrintStream stream) {
        getOperand().generateGo(stream);
        stream.print("-");
    }
//
    public void AddAddExp.generateGo(PrintStream stream) {
        getLeft().generateGo(stream);
        stream.print(" + ");
        getRight().generateGo(stream);
        stream.print("");
    }
//
    public void SubAddExp.generateGo(PrintStream stream) {
        getLeft().generateGo(stream);
        stream.print(" - ");
        getRight().generateGo(stream);
        stream.print(" ");
    }
//
    public void DivMultExp.generateGo(PrintStream stream) {
        getLeft().generateGo(stream);
        stream.print(" / ");
        getRight().generateGo(stream);
        stream.print(" ");
    }
//  TODO perlu math.Mod ?
    public void ModMultExp.generateGo(PrintStream stream) {
//        getLeft().generateGo(stream);
//        stream.print(".mod(");
//        getRight().generateGo(stream);
//        stream.print(")");
    }
//
    public void MultMultExp.generateGo(PrintStream stream) {
        getLeft().generateGo(stream);
        stream.print(" * ");
        getRight().generateGo(stream);
        stream.print(" ");
    }
//
    public void AndBoolExp.generateGo(PrintStream stream) {
        getLeft().generateGo(stream);
        stream.print(" && ");
        getRight().generateGo(stream);
        stream.print(" ");
    }
//
    public void OrBoolExp.generateGo(PrintStream stream) {
        getLeft().generateGo(stream);
        stream.print(" || ");
        getRight().generateGo(stream);
        stream.print(" ");
    }
//
    public void EqExp.generateGo(PrintStream stream) {
//        stream.print(BinOp.class.getName() + ".eq(");
        getLeft().generateGo(stream);
        stream.print(" == ");
        getRight().generateGo(stream);
        stream.print(" ");
    }
//
    public void NotEqExp.generateGo(PrintStream stream) {
//        stream.print(BinOp.class.getName() + ".notEq(");
        getLeft().generateGo(stream);
        stream.print(" != ");
        getRight().generateGo(stream);
        stream.print(" ");
    }
//
    public void GTEQExp.generateGo(PrintStream stream) {
//        stream.print(BinOp.class.getName() + ".gtEq(");
        getLeft().generateGo(stream);
        stream.print(" >= ");
        getRight().generateGo(stream);
        stream.print(" ");
    }
//
    public void GTExp.generateGo(PrintStream stream) {
//        stream.print(BinOp.class.getName() + ".gt(");
        getLeft().generateGo(stream);
        stream.print(" > ");
        getRight().generateGo(stream);
        stream.print(" ");
    }
//
    public void LTEQExp.generateGo(PrintStream stream) {
//        stream.print(BinOp.class.getName() + ".ltEq(");
        getLeft().generateGo(stream);
        stream.print(" <= ");
        getRight().generateGo(stream);
        stream.print(" ");
    }
//
    public void LTExp.generateGo(PrintStream stream) {
//        stream.print(BinOp.class.getName() + ".lt(");
        getLeft().generateGo(stream);
        stream.print(" < ");
        getRight().generateGo(stream);
        stream.print(" ");
    }
//
//    /* Components */
//    public void RebindStmt.generateGo(String indent, PrintStream stream) { }
//    public void MoveStmt.generateGo(String indent, PrintStream stream) { }
//
    public void NewLocExp.generateGo(PrintStream stream) { }
    public void GetLocExp.generateGo(PrintStream stream) { }
    public void GetFatherExp.generateGo(PrintStream stream) { }
//    public void ObjectGuard.generateGoGuard(PrintStream beforeAwaitStream, PrintStream stream) {}
//
//    /*****/
    public void TraitUse.generateGo(PrintStream stream) { }
    public void TraitDecl.generateGo(PrintStream stream) { }
//    public void DeltaTraitModifier.generateGo(PrintStream stream) { }
//    public void AddMethodModifier.generateGo(PrintStream stream) { }
//    public void RemoveMethodModifier.generateGo(PrintStream stream) { }
//    public void ModifyMethodModifier.generateGo(PrintStream stream) { }
    
}


